type WrapType = variant {
    unwrap;
    wrap;
};

type WrapRequest = record {
    index: opt nat;
    limit: opt nat;
    offset: opt nat;
    user: opt User;
};

type WrapRecord = record {
    amount: Balance;
    blockHeight: BlockHeight;
    date: Date;
    from: AccountIdentifier;
    index: nat;
    to: AccountIdentifier;
    wrapType: WrapType;
};

type WithdrawRequest = record {
    amount: Balance;
    to: User;
};

type User__1 = variant {
    address: AccountIdentifier;
    "principal": principal;
};

type User = variant {
    address: AccountIdentifier;
    "principal": principal;
};

type TransferResponse = variant {
    err: variant {
        CannotNotify: AccountIdentifier;
        InsufficientAllowance;
        InsufficientBalance;
        InvalidToken: TokenIdentifier;
        Other: text;
        Rejected;
        Unauthorized: AccountIdentifier;
    };
    ok: Balance;
};

type TransferRequest = record {
    amount: Balance;
    from: User;
    memo: Memo;
    nonce: opt nat;
    notify: bool;
    subaccount: opt SubAccount;
    to: User;
    token: TokenIdentifier;
};

type TransactionRequest = record {
    hash: opt text;
    index: opt nat;
    limit: opt nat;
    offset: opt nat;
    user: opt User;
};

type Transaction = record {
    amount: Balance;
    fee: Balance;
    from: AccountIdentifier;
    hash: text;
    index: nat;
    memo: opt blob;
    status: text;
    timestamp: int;
    to: AccountIdentifier;
    transType: TransType;
};

type TransType = variant {
    approve;
    burn;
    mint;
    transfer;
};

type TokenIdentifier = text;

type SubAccount = vec nat8;

type Result_9 = variant {
    err: CommonError__1;
    ok: nat;
};

type Result_8 = variant {
    err: CommonError;
    ok: Page_2;
};

type Result_7 = variant {
    err: CommonError__1;
    ok: Metadata;
};

type Result_6 = variant {
    err: CommonError;
    ok: bool;
};

type Result_5 = variant {
    err: CommonError__1;
    ok: bool;
};

type Result_4 = variant {
    err: CommonError__1;
    ok: Balance__1;
};

type Result_3 = variant {
    err: CommonError;
    ok: nat;
};

type Result_2 = variant {
    err: CommonError;
    ok: Page_1;
};

type Result_1 = variant {
    err: CommonError;
    ok: BlockHeight__1;
};

type Result = variant {
    err: CommonError;
    ok: Page;
};

type Page_2 = record {
    content: vec Holder;
    limit: nat;
    offset: nat;
    totalElements: nat;
};

type Page_1 = record {
    content: vec Transaction;
    limit: nat;
    offset: nat;
    totalElements: nat;
};

type Page = record {
    content: vec WrapRecord;
    limit: nat;
    offset: nat;
    totalElements: nat;
};

type MintRequest = record {
    blockHeight: BlockHeight;
    to: User;
};

type Metadata = variant {
    fungible: record {
        decimals: nat8;
        metadata: opt blob;
        name: text;
        ownerAccount: AccountIdentifier;
        symbol: text;
    };
    nonfungible: record {
        metadata: opt blob;
    };
};

type Memo = blob;

type HoldersRequest = record {
    limit: opt nat;
    offset: opt nat;
};

type Holder = record {
    account: AccountIdentifier;
    balance: nat;
};

type Extension = text;

type Date = nat64;

type CommonError__1 = variant {
    InsufficientBalance;
    InvalidToken: TokenIdentifier;
    Other: text;
    Unauthorized: AccountIdentifier;
};

type CommonError = variant {
    InsufficientBalance;
    InvalidToken: TokenIdentifier;
    Other: text;
    Unauthorized: AccountIdentifier;
};

type BlockHeight__1 = nat64;

type BlockHeight = nat64;

type Balance__1 = nat;

type BalanceResponse = variant {
    err: CommonError;
    ok: Balance;
};

type BalanceRequest = record {
    token: TokenIdentifier;
    user: User;
};

type Balance = nat;

type ApproveRequest = record {
    allowance: Balance;
    spender: principal;
    subaccount: opt SubAccount;
};

type AllowanceRequest = record {
    owner: User;
    spender: principal;
    subaccount: opt SubAccount;
};

type AccountIdentifier__1 = text;

type AccountIdentifier = text;service : {
    _balance: (BalanceRequest) -> (BalanceResponse) query;
    _extensions: () -> (vec Extension) query;
    allowance: (AllowanceRequest) -> (Result_4) query;
    approve: (ApproveRequest) -> (Result_5);
    balance: (BalanceRequest) -> (BalanceResponse) query;
    cycleAvailable: () -> (Result_9);
    cycleBalance: () -> (Result_9) query;
    extensions: () -> (vec Extension) query;
    getFee: () -> (Result_4) query;
    holders: (HoldersRequest) -> (Result_8) query;
    metadata: () -> (Result_7) query;
    mint: (MintRequest) -> (Result_6);
    registry: () -> (vec record {
        AccountIdentifier__1;
        Balance__1;
    }) query;
    setFee: (Balance__1) -> (Result_5);
    setFeeTo: (User__1) -> (Result_5);
    supply: () -> (Result_4) query;
    totalHolders: () -> (Result_3) query;
    transactions: (TransactionRequest) -> (Result_2) query;
    transfer: (TransferRequest) -> (TransferResponse);
    transferFrom: (TransferRequest) -> (TransferResponse);
    withdraw: (WithdrawRequest) -> (Result_1);
    wrappedTx: (WrapRequest) -> (Result);
}
