type TxnResult = variant {
   err: record {
      code: variant {
         DuplicateExecutedTransfer;
         InsufficientAllowance;
         InsufficientBalance;
         InsufficientGas;
         LockedTransferExpired;
         NoLockedTransfer;
         NonceError;
         UndefinedError;
       };
      message: text;
    };
   ok: Txid;
 };
type TxnRecord = record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid;
 };
type TxnQueryResponse = variant {
   getEvents: vec TxnRecord;
   getTxn: opt TxnRecord;
   lastTxids: vec Txid;
   lastTxidsGlobal: vec Txid;
   lockedTxns: record { lockedBalance: nat; txns: vec TxnRecord; };
   txnCount: nat;
   txnCountGlobal: nat;
 };
type TxnQueryRequest = variant {
   getEvents: record {owner: opt Address;};
   getTxn: record {txid: Txid;};
   lastTxids: record {owner: Address;};
   lastTxidsGlobal;
   lockedTxns: record {owner: Address;};
   txnCount: record {owner: Address;};
   txnCountGlobal;
 };
type Txid = blob;
type Transaction = record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type To = text;
type Timestamp = nat64;
type Timeout = nat32;
type Time = int;
type Subscription = record { callback: Callback; msgTypes: vec MsgType; };
type Subaccount = blob;
type Spender = text;
type Sa = vec nat8;
type Operation = variant {
   approve: record {allowance: nat;};
   executeTransfer: record { fallback: nat; lockedTxid: Txid; };
   lockTransfer: record { decider: AccountId; expiration: Time; locked: nat;};
   transfer: record {action: variant { burn; mint; send; };};
 };
type Nonce = nat;
type MsgType = variant { onApprove; onExecute; onLock; onTransfer; };
type Metadata = record { content: text; name: text; };
type InitArgs = record {
   decimals: nat8;
   fee: nat;
   founder: opt Address;
   metadata: opt vec Metadata;
   name: opt text;
   symbol: opt text;
   totalSupply: nat;
 };
type Gas = variant { cycles: nat; noFee; token: nat; };
type From = text;
type ExecuteType = variant { fallback; send: nat; sendAll; };
type Decider = text;
type Data = blob;
type CoinSeconds = record { coinSeconds: nat; updateTime: int; };
type Callback = func (TxnRecord) -> ();
type Amount = nat;
type Allowance = record { remaining: nat; spender: AccountId; };
type Address = text;
type AccountId = blob;
type Account = record { owner: principal; subaccount: opt Subaccount; };
type DRC20 = service {
   standard: () -> (text) query;
   drc20_allowance: (Address, Spender) -> (Amount) query;
   drc20_approvals: (Address) -> (vec Allowance) query;
   drc20_approve: (Spender, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_balanceOf: (Address) -> (Amount) query;
   drc20_decimals: () -> (nat8) query;
   drc20_dropAccount: (opt Sa) -> (bool);
   drc20_executeTransfer: (Txid, ExecuteType, opt To, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_fee: () -> (Amount) query;
   drc20_getCoinSeconds: (opt Address) -> (CoinSeconds, opt CoinSeconds) query;
   drc20_holdersCount: () -> (nat, nat, nat) query;
   drc20_lockTransfer: (To, Amount, Timeout, opt Decider, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_lockTransferFrom: (From, To, Amount, Timeout, opt Decider, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_metadata: () -> (vec Metadata) query;
   drc20_name: () -> (text) query;
   drc20_subscribe: (Callback, vec MsgType, opt Sa) -> (bool);
   drc20_subscribed: (Address) -> (opt Subscription) query;
   drc20_symbol: () -> (text) query;
   drc20_totalSupply: () -> (Amount) query;
   drc20_transfer: (To, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_transferFrom: (From, To, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   drc20_txnQuery: (TxnQueryRequest) -> (TxnQueryResponse) query;
   drc20_txnRecord: (Txid) -> (opt TxnRecord);
 };
service : (InitArgs) -> DRC20